controller:
  componentName: "jenkins-controller"
  # Jenkins LTS version control: Update this tag for upgrades (e.g., to "2.452.2-lts")
  image:
    repository: "jenkins/jenkins"
    tag: "2.504.3-lts"
  replicas: 4  # High availability with 4 controller pods
  serviceEnabled: true  # Exposes Jenkins via AWS ELB
  serviceType: ClusterIP
  servicePort: 8080
  targetPort: 8080
  admin:
    username: "admin"
    createSecret: true
  resources:
    requests:
      cpu: "1"
      memory: "2Gi"
    limits:
      cpu: "2"
      memory: "4Gi"
  livenessProbe:
    enabled: true
    initialDelaySeconds: 90
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 12
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
  installPlugins:
    - kubernetes
    - workflow-job
    - workflow-aggregator
    - credentials
    - git
    - configuration-as-code
    - blueocean
    - pipeline-groovy-lib
    - job-dsl
    - matrix-auth
    - prometheus
    - cloudbees-disk-usage-simple
  installLatestPlugins: true

  JCasC:
    # -- Enables default Jenkins configuration via configuration as code plugin
    defaultConfig: true
    securityRealm: |-
      local:
        allowsSignup: false
        enableCaptcha: false
        users:
        - id: "${chart-admin-username}"
          name: "Jenkins Admin"
          password: "${chart-admin-password}"
    authorizationStrategy: |-
      loggedInUsersCanDoAnything:
        allowAnonymousRead: false
    logging:
        configuration:
          # -- Enables custom log config utilizing using the settings below.
          override: false
          logLevel: INFO
          formatter: JSON
          logToConsole: true
          logToFile: false
          maxBytes: 1024
          backupCount: 3
    kubernetes-cloud: |-
      jenkins:
        clouds:
          - kubernetes:
              name: "kubernetes"
              serverUrl: "https://kubernetes.default"
              namespace: "jenkins"
              skipTlsVerify: true
              jenkinsUrl: "http://jenkins:8080"
              containerCapStr: "20"
              templates:
                - name: "polyglot-agent"
                  labels: "polyglot"
                  minimum: 0
                  idleMinutes: 10
                  containers:
                    - name: "jnlp"
                      image: "jenkins/inbound-agent:latest"
                      ttyEnabled: true
                      resourceRequestCpu: "200m"
                      resourceRequestMemory: "512Mi"
                      resourceLimitCpu: "1"
                      resourceLimitMemory: "1Gi"
                    - name: "java"
                      image: "maven:3.9.6-eclipse-temurin-17"
                      command: ["cat"]
                      ttyEnabled: true
                    - name: "python"
                      image: "python:3.12-alpine"
                      command: ["cat"]
                      ttyEnabled: true
                    - name: "node"
                      image: "node:20-alpine"
                      command: ["cat"]
                      ttyEnabled: true
                  volumes:  # Corrected: Ensure this is a list of maps
                    - persistentVolumeClaim:  # Use map format for each volume
                        claimName: "efs-jenkins-pvc"  # Match your PVC name
                        mountPath: "/var/jenkins_home"
                  yamlMergeStrategy: "override"
                  nodeUsageMode: "NORMAL"

  metrics:
    enabled: true  # Enables Prometheus metrics endpoint at /prometheus
    port: 8080  # Optional: Customize if needed (default matches servicePort)
    path: "/prometheus"  # Optional: Default path
  backup:
    enabled: false  # Enable and configure for scheduled backups if needed
  javaOpts: "-Djenkins.model.Jenkins.slaveAgentPort=50000 -Djenkins.install.runSetupWizard=false"
  disableCSRF: false  # Keep enabled for security
  usePodSecurityPolicy: true
rbac:
  create: true
  # -- Whether the Jenkins service account should be able to read Kubernetes secrets
  readSecrets: false

persistence:
  # -- Enable the use of a Jenkins PVC
  enabled: true
  existingClaim: efs-jenkins-pvc # Pre-created EFS PVC for JENKINS_HOME and logs
  storageClass: efs-jenkins-sc

agent:
  enabled: true
  resources:
    requests:
      cpu: "500m"
      memory: "1Gi"
    limits:
      cpu: "2"
      memory: "4Gi"
  podTemplates: {}  # Managed via JCasC for consistency
networkPolicy:
  enabled: true  # Restricts network access for security
podSecurityContext: {}
containerSecurityContext: {}
